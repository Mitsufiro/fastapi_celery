version: "3"
networks:
  traefik-dashboard:
    external: true
  internal:
    external: false
services:
  db:
    image: postgres:13-alpine
    #    command: bash -c "alembic revision --autogenerate -m "New Migration" && alembic upgrade head"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - traefik-dashboard
#      - internal

  #    pgadmin:
  #      image: dpage/pgadmin4
  #      environment:
  #        - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
  #        - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
  #      ports:
  #        - 5050:80
  #      depends_on:
  #        - db
  app:
    build: .
    command: bash -c "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    volumes:
      - .:/fastapi_celery
    ports:
      - 8000:8000
    restart: always
    env_file:
      - ./.env
    depends_on:
      - db
      - celery_worker
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.app.loadbalancer.server.port=80"
      - "traefik.http.routers.app-http.entrypoints=http"
      - "traefik.http.routers.app-http.rule=Host(`encryptedmailing.online`)"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=le"
      - "traefik.docker.network=traefik-dashboard"
    networks:
#      - internal
      - traefik-dashboard


  rabbitmq:
    image: "rabbitmq:3.9.11-management"
    ports:
      - "4360:4360"
      - "5672:5672"
      - "25672:25672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/bitnami
    #      - /bitnami
    depends_on:
      - db
    networks:
      - traefik-dashboard
  celery_worker:
    container_name: celery_worker
    build: .
    command: celery -A worker.celery_worker worker -l info -Q test-queue
    volumes:
      - .:/fastapi_celery
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      #      - app
      - db
      - rabbitmq
    networks:
      - traefik-dashboard


  flower:
    container_name: flower
    build: .
    command: celery -A worker.celery_worker flower --port=5555 -l info -Q test-queue
    ports:
      - 5555:5555
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - app
      - rabbitmq
      - celery_worker
    networks:
      - traefik-dashboard
  traefik:
    image: traefik:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    labels:
      - "traefik.enable=true"
      - "traefik.constraint-label=traefik-dashboard"
      - "traefik.http.services.traefik-dashboard.loadbalancer.server.port=80"
      - "traefik.http.routers.traefik-dashboard-http.entrypoints=http"
      - "traefik.http.routers.traefik-dashboard-http.rule=Host(`encryptedmailing.online`)"
      - "traefik.docker.network=traefik-dashboard"
      - "traefik.http.routers.traefik-dashboard-https.entrypoints=https"
      - "traefik.http.routers.traefik-dashboard-https.rule=Host(`encryptedmailing.online`)"
      - "traefik.http.routers.traefik-dashboard-https.tls=true"
      - "traefik.http.routers.traefik-dashboard-https.tls.certresolver=le"
      - "traefik.http.routers.traefik-dashboard-https.service=api@internal"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect"
      - "traefik.http.middlewares.admin-auth.basicauth.users='admin:$$apr1$$jIKW.bdS$$eKXe4Lxjgy/rH65wP1iQe1'"
      - "traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the traefik-public-certificates
      - traefik-public-certificates:/certificates
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=lyashenk.ilya@gmail.com
      # Store the Let's Encrypt traefik-public-certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
volumes:
  postgres_data:
  traefik-public-certificates:
  rabbitmq_data:
    driver: local